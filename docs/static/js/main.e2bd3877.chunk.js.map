{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","_Users_xiaoxi_mac_Documents_webApps_reactTutorial_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_Users_xiaoxi_mac_Documents_webApps_reactTutorial_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_xiaoxi_mac_Documents_webApps_reactTutorial_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","history","Array","fill","xIsNext","winner","gameMode","current","length","_Users_xiaoxi_mac_Documents_webApps_reactTutorial_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","setState","concat","calculateWinner","aiPossibleSteps","map","index","push","Math","floor","random","historyIndex","slice","newGameMode","status","_this3","moves","desc","key","jumpTo","indexOf","handleClick","toggleGameMode","style","color","lines","_lines$i","_Users_xiaoxi_mac_Documents_webApps_reactTutorial_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2bd3877.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        return <Square\n                    value={this.props.squares[i]}\n                    onClick={() => this.props.onClick(i)}/>;\n    };\n\n    render() {\n\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            xIsNext: true,\n            winner: null,\n            gameMode: 'ai'\n        };\n    }\n\n    handleClick(i) {\n        if (this.state.gameMode === 'human') {\n            const history = this.state.history;\n            const current = history[history.length - 1];\n            const squares = [...current.squares];\n            if (this.state.winner || squares[i]) return;\n            squares[i] = this.state.xIsNext ? 'X' : 'O';\n            this.setState({\n                history: history.concat([{squares: squares}]),\n                xIsNext: !this.state.xIsNext,\n                winner: calculateWinner(squares),\n            });\n        } else {\n            const history = this.state.history;\n            const current = history[history.length - 1];\n            const squares = [...current.squares];\n            if (this.state.winner || squares[i]) return;\n            squares[i] = 'X';\n\n            if (calculateWinner(squares)) {\n                this.setState({\n                    history: history.concat([{squares: squares}]),\n                    winner: calculateWinner(squares),\n                });\n            } else {\n                const aiPossibleSteps = [];\n                squares.map((i, index) => !i ? aiPossibleSteps.push(index) : null);\n                const aiNextStep = aiPossibleSteps[Math.floor(Math.random() * aiPossibleSteps.length)];\n                squares[aiNextStep] = 'O'\n\n                this.setState({\n                    history: history.concat([{squares: squares}]),\n                    winner: calculateWinner(squares),\n                });\n            }\n        }\n    }\n\n    jumpTo(historyIndex) {\n        this.setState({\n            history: this.state.history.slice(0, historyIndex + 1),\n            xIsNext: historyIndex % 2 === 0 ? false : true,\n            winner: null,\n        })\n    }\n    toggleGameMode() {\n        const newGameMode = this.state.gameMode === 'ai' ? 'human' : 'ai';\n        this.setState({\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            gameMode: newGameMode,\n            winner: null,\n            xIsNext: true\n       });\n\n    };\n\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1].squares;\n\n        const moves = history.map((i, historyIndex) => {\n            const desc = historyIndex ?\n                'Go to move #' + historyIndex :\n                'Go to game start';\n            return (\n                <li key={historyIndex}>\n                    <button onClick={() => this.jumpTo(historyIndex)}> {desc} </button>\n                </li>\n            );\n        });\n\n\n        let status;\n        if (this.state.gameMode === 'ai' && this.state.winner) {\n            status = 'You win!';\n        } else if (this.state.gameMode === 'ai' && !this.state.winner) {\n            status ='';\n        } else if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner;\n        } else if (!this.state.winner && current.indexOf(null) === -1) {\n            status = 'It\\'s a draw game :D'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={this.state.history[this.state.history.length - 1].squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <button\n                        className={this.state.gameMode === 'human' ? 'game-mode button-active' : 'game-mode'}\n                        onClick={() => this.toggleGameMode()}>\n                            Two Players</button>\n                    <button\n                        className={this.state.gameMode === 'ai' ? 'game-mode button-active' : 'game-mode'}\n                        onClick={() => this.toggleGameMode()}>\n                            Play with AI</button>\n                    <div className='game-info-announcement' style={this.state.winner ? {color: 'red'} : null}>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i=0; i<lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (\n            squares[a] &&\n            squares[a] === squares[b] &&\n            squares[a] === squares[c]\n        ) return squares[a];\n    } return null;\n}"],"sourceRoot":""}